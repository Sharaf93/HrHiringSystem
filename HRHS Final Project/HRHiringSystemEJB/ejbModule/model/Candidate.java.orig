package model;

import java.io.Serializable;
import javax.persistence.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;


/**
 * The persistent class for the "Candidates" database table.
 * 
 */
@Entity
<<<<<<< working copy
@Table(name="\"Candidates\"",schema="HRHSSSCHEMA")
=======
@Table(name="\"Candidates\"")
@NamedQuery(name="Candidate.getCandidates", query="Select c from Candidate c")
>>>>>>> destination
public class Candidate implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	//@Column(name="\"ID\"", unique=true, nullable=false)
	private long id;

	@Column(name="\"currentCompanyName\"", length=15)
	private String currentCompanyName;

	@Column(name="\"currentPosition\"", length=25)
	private String currentPosition;

	@Column(name="\"currentSalary\"", precision=16, scale=2)
	private BigDecimal currentSalary;

	@Temporal(TemporalType.DATE)
	@Column(name="\"dateCreated\"", nullable=false)
	private Date dateCreated;

	@Column(name="\"email\"", nullable=false, length=20)
	private String email;

	@Column(name="\"fullName\"", nullable=false, length=36)
	private String fullName;

	@Column(name="\"HRSourceID\"", nullable=false)
	private long HRSourceID;

	@Column(name="\"mobileNumber\"", nullable=false, precision=20)
	private BigInteger mobileNumber;

	@Column(name="\"offerRejectionReason\"", length=30)
	private String offerRejectionReason;

	@Column(name="\"offerStatus\"", length=10)
	private String offerStatus;

	@Column(name="\"phoneNumber\"", precision=20)
	private BigInteger phoneNumber;

	@Column(name="\"positionsID\"", nullable=false)
	private long positionsID;

	@Column(name="\"reasonsOfFailureID\"", nullable=false)
	private long reasonsOfFailureID;

	@Column(name="\"sourceID\"", nullable=false)
	private long sourceID;

	@Column(name="\"status\"", length=10)
	private String status;

	@Column(name="\"yearsOfExperience\"")
	private int yearsOfExperience;
<<<<<<< working copy
	
	@Column(name="\"dateOfBirth\"", nullable=false)
	private String dateOfBirth;
	
	
	
	//bi-directional many-to-one association to HRSource
	@ManyToOne
		@JoinColumn(name="\"HRSourceID\"")
		private HRSource hrsource;

		//bi-directional many-to-one association to Position
		@ManyToOne
		@JoinColumn(name="\"positionsID\"")
		private Position position;

		//bi-directional many-to-one association to ReasonsOfFailure
		@ManyToOne
		@JoinColumn(name = "\"reasonsOfFailureID\"")
		private ReasonsOfFailure reasonsOfFailure;

		//bi-directional many-to-one association to Source
		@ManyToOne
		@JoinColumn(name ="\"sourceID\"")
		private Source source;

	/*	//bi-directional many-to-one association to PhasesDetail
		@OneToMany(mappedBy="candidate", cascade=CascadeType.ALL)
		private List<PhasesDetail> phasesDetails;

		//bi-directional many-to-one association to TestsDetail
		@OneToMany(mappedBy="candidate", cascade=CascadeType.ALL)
		private List<TestsDetail> testsDetails;*/

=======

	//bi-directional many-to-one association to HRSource
	@ManyToOne
	@JoinColumn(name="\"HRSourceID\"")
	private HRSource hrsource;

	//bi-directional many-to-one association to Position
	@ManyToOne
	@JoinColumn(name="\"positionsID\"")
	private Position position;

	//bi-directional many-to-one association to ReasonsOfFailure
	@ManyToOne
	@JoinColumn(name = "\"reasonsOfFailureID\"")
	private ReasonsOfFailure reasonsOfFailure;

	//bi-directional many-to-one association to Source
	@ManyToOne
	@JoinColumn(name ="\"sourceID\"")
	private Source source;

	//bi-directional many-to-one association to PhasesDetail
	@OneToMany(mappedBy="candidate" , fetch=FetchType.EAGER)
	private List<PhasesDetail> phasesDetails;
>>>>>>> destination

	//bi-directional many-to-one association to TestsDetail
	@OneToMany(mappedBy="candidate" , fetch=FetchType.EAGER)
	private List<TestsDetail> testsDetails;

	public Candidate() {
	}

	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}
<<<<<<< working copy
	
	public String getDateOfBirth() {
		return dateOfBirth;
	}

	public void setDateOfBirth(String dOB) {
		this.dateOfBirth = dOB;
	}
=======
>>>>>>> destination

	public String getCurrentCompanyName() {
		return this.currentCompanyName;
	}

	public void setCurrentCompanyName(String currentCompanyName) {
		this.currentCompanyName = currentCompanyName;
	}

	public String getCurrentPosition() {
		return this.currentPosition;
	}

	public void setCurrentPosition(String currentPosition) {
		this.currentPosition = currentPosition;
	}

	public BigDecimal getCurrentSalary() {
		return this.currentSalary;
	}

	public void setCurrentSalary(BigDecimal currentSalary) {
		this.currentSalary = currentSalary;
	}

	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getFullName() {
		return this.fullName;
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	public long getHRSourceID() {
		return this.HRSourceID;
	}

	public void setHRSourceID(long HRSourceID) {
		this.HRSourceID = HRSourceID;
	}

	public BigInteger getMobileNumber() {
		return this.mobileNumber;
	}

	public void setMobileNumber(BigInteger mobileNumber) {
		this.mobileNumber = mobileNumber;
	}

	public String getOfferRejectionReason() {
		return this.offerRejectionReason;
	}

	public void setOfferRejectionReason(String offerRejectionReason) {
		this.offerRejectionReason = offerRejectionReason;
	}

	public String getOfferStatus() {
		return this.offerStatus;
	}

	public void setOfferStatus(String offerStatus) {
		this.offerStatus = offerStatus;
	}

	public BigInteger getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(BigInteger phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public long getPositionsID() {
		return this.positionsID;
	}

	public void setPositionsID(long positionsID) {
		this.positionsID = positionsID;
	}

	public long getReasonsOfFailureID() {
		return this.reasonsOfFailureID;
	}

	public void setReasonsOfFailureID(long reasonsOfFailureID) {
		this.reasonsOfFailureID = reasonsOfFailureID;
	}

	public long getSourceID() {
		return this.sourceID;
	}

	public void setSourceID(long sourceID) {
		this.sourceID = sourceID;
	}

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public int getYearsOfExperience() {
		return this.yearsOfExperience;
	}

	public void setYearsOfExperience(int yearsOfExperience) {
		this.yearsOfExperience = yearsOfExperience;
	}

<<<<<<< working copy
	/*public List<PhasesDetail> getPhasesDetails() {
=======
	public HRSource getHrsource() {
		return this.hrsource;
	}

	public void setHrsource(HRSource hrsource) {
		this.hrsource = hrsource;
	}

	public Position getPosition() {
		return this.position;
	}

	public void setPosition(Position position) {
		this.position = position;
	}

	public ReasonsOfFailure getReasonsOfFailure() {
		return this.reasonsOfFailure;
	}

	public void setReasonsOfFailure(ReasonsOfFailure reasonsOfFailure) {
		this.reasonsOfFailure = reasonsOfFailure;
	}

	public Source getSource() {
		return this.source;
	}

	public void setSource(Source source) {
		this.source = source;
	}

	public List<PhasesDetail> getPhasesDetails() {
>>>>>>> destination
		return this.phasesDetails;
	}

	public void setPhasesDetails(List<PhasesDetail> phasesDetails) {
		this.phasesDetails = phasesDetails;
	}

	public PhasesDetail addPhasesDetail(PhasesDetail phasesDetail) {
		getPhasesDetails().add(phasesDetail);
		phasesDetail.setCandidate(this);

		return phasesDetail;
	}

	public PhasesDetail removePhasesDetail(PhasesDetail phasesDetail) {
		getPhasesDetails().remove(phasesDetail);
		phasesDetail.setCandidate(null);

		return phasesDetail;
	}*/

	public List<TestsDetail> getTestsDetails() {
		return this.testsDetails;
	}

	public void setTestsDetails(List<TestsDetail> testsDetails) {
		this.testsDetails = testsDetails;
	}

	public TestsDetail addTestsDetail(TestsDetail testsDetail) {
		getTestsDetails().add(testsDetail);
		testsDetail.setCandidate(this);

		return testsDetail;
	}

	public TestsDetail removeTestsDetail(TestsDetail testsDetail) {
		getTestsDetails().remove(testsDetail);
		testsDetail.setCandidate(null);

		return testsDetail;
	}

}